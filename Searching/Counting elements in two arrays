class Solution
{
     public static int binary_Search(int arr[], int l, int h, int x)
    {
       while (l <= h)
       {
        int mid = (l+h) / 2;
 
        
        if (arr[mid] <= x)
            l = mid + 1;
 
        
        else
            h = mid - 1;    
       }
     
    
      return h;
   } 
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
        ArrayList<Integer> res = new ArrayList<Integer> (0);
        Arrays.sort(arr2);
        
        for(int i = 0; i < m; i++)
        {
            int index = binary_Search(arr2, 0, n-1, arr1[i]);
            
            res.add (index + 1);
        }
        return res;
    }
}

===========================================


class Solution
{ 
     static int binarySearch(int[]arr,int target,int i,int j){
    if(i<j){
            int mid=(i+j)/2;
            if(arr[mid]<=target){
                return binarySearch(arr,target,mid+1,j);
            }else{
                return binarySearch(arr,target,i,mid);
            }
        }
        return i;
    }
    
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
       // add your code here
       Arrays.sort(arr2);//O(nlogn)
       ArrayList<Integer> ans=new ArrayList<>();
       for(int i=0;i<arr1.length;i++){
           ans.add(binarySearch(arr2,arr1[i],0,arr2.length));
       }
       return ans;
    }
}

=========================

class Solution
{
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
       // add your code here
         ArrayList<Integer> list=new ArrayList<>();
    Arrays.sort(arr2);
    
  for(int i=0;i<arr1.length;i++)
  {
      list.add(binarySearch(arr1[i],arr2));
  }
   
   return list;
    }
    
    public static int binarySearch(int val,int [] arr2)
    {
        int low=0;
        int high=arr2.length-1;
        
        while(low<=high)
        {
            int mid=(low+high)/2;
            
            if(arr2[mid]<=val)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        
        return low;
    }
}


