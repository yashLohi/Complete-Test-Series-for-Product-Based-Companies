long long int floorSqrt(long long int x) 
    {
        // Your code goes here
        int low = 1, high = x;
        long long ans = -1;
        
        while (low <= high) {
            
            long long mid = low + (high - low)/2;
            long long square = mid * mid;
            if (square == x)
                return mid;
            else if (square > x) {
                high = mid - 1;
            } else {
                ans = mid;
                low = mid + 1;
            }
        }
        
        return ans;
    }
    
    =====================================
    
    class Solution{

      long floorSqrt (long x){

          return (long)Math.sqrt(x);
       }

}

================================================


class Solution


{
     long floorSqrt(long x)
	 {
	     // base case
		if(x == 0 || x == 1)
			return x;
			
		long start = 1, end = x, ans = 0;
		
		// binary search to find square root of a number
		while(start <= end)
		{
			long mid = (start + end)/2;

            // if mid*mid == x, then mid is the required element
			if(mid*mid == x)
				return mid;
				
			// if mid*mid < x, then iterate for upper half
			if(mid*mid < x)
			{
				start = mid+1;
				ans = mid;
			}
			// else, iterate for lower half
			else
				end = mid - 1;
				
		}
		return ans;
	 }
}
