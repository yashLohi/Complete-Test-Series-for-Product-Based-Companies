class Solution 
{ 
    static int Search(int arr[], int k)
	{
	    // code here
	    int low = 0, high = arr.length-1;
    
    while(low <= high){
        int mid = (high + low)/2;
        
        if(arr[mid] == k)
            return mid;
            
        // if left half sorted
        if(arr[low] < arr[mid]){
            if(k >= arr[low] && k < arr[mid])
                high = mid-1;
            else 
                low = mid+1;
        }
        // if right half sorted
        else if(arr[mid] < arr[high]){
            if(k > arr[mid] && k <= arr[high])
                low = mid +1;
            else 
                high = mid -1;
        }
    }
    
    return -1;

	}
} 

=================================================

class Solution 

{ 

    static int Search(int arr[], int t)

 {

     // code here

     

     if(t==arr[arr.length-1]) return arr.length-1;

     for(int i =1;i<arr.length-1;i++){

         if(arr[i]==t) return i;

         if(arr[i+1]==t) return i+1;

         if(arr[i-1]==t) return i-1;

         

         i++;

     }

     return -1;

 }

} 

==================================

class Solution 
{ 
    static int Search(int array[], int target)
	{    
	    int n = array.length;
	    int low = 0, high = n-1, ans = -1;
	    while(low <= high){
	        int mid = (low+high)/2;
	        if(target == array[mid]){
	            ans = mid;
	            break;
	        }

	        if(array[low] <= array[mid]){
	            if(array[low] <= target && target <= array[mid]){
	                high = mid-1;
	            }
	            else{
	                low = mid+1;
	            }
	        }
	        else{
	            if(array[mid] < array[high]){
	                if(array[mid] <= target && target <= array[high]){
	                    low = mid+1;
	                }
	                else{
	                    high = mid-1;
	                }
	            }
	        }
	    }
	    return ans;
	}
} 
