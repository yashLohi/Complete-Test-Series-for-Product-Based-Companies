class GfG {
    int transitionPoint(int arr[], int n) {
        if (arr[0] == 1) {
            return 0;
        }
        // Initialise lower and upper bounnds
        int lb = 0, ub = n - 1;

        // Perform Binary search
        while (lb <= ub) {
            // Find mid
            int mid = (lb + ub) / 2;

            // update lower_bound if mid contains 0
            if (arr[mid] == 0) lb = mid + 1;

            // If mid contains 1
            else if (arr[mid] == 1) {
                // Check if it is the left most 1
                // Return mid, if yes
                if (arr[mid - 1] == 0) return mid;

                // Else update upper_bound
                ub = mid - 1;
            }
        }
        return -1;
    }
}


====================================




class GfG {
    int transitionPoint(int arr[], int n) {
        // code here
	int start=0;
    int res=-1;
    int end=arr.length-1;
    while(start<=end){
        int mid=(start+end);//2
        if(arr[mid]==1){
             res=mid;
            end=mid-1;
        }
        else if(arr[mid]==0) {
            start=mid+1;
        }
    }
    return res;
    }
}

========================================


class GfG {
    int transitionPoint(int arr[], int n) {
        // code here
        
        
        int index=0;
		for(int i=0;i<n;i++)
		{
			if(arr[i]==1)
			{
				index=i;
				break;
			}
			else {
				index=-1;
			}
		}
		return index;
		
		
        
    }
}
