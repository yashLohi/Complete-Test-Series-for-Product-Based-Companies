class Solution{
    
    // Function to find floor of x
    // arr: input array
    // n is the size of array
    static int findFloor(long arr[], int n, long x)
    {
        int l = 0;
        int h = n -1;
        while(l <= h){
            int mid = l + (h - l)/2;
            
            if(arr[mid] == x)
                return mid;
            else if(arr[mid] < x)
                l = mid + 1;
            else
                h = mid -1;
        }
        return h;
    }
    
}



        //  int low=0;
        // int high=v.size()-1;
        // int mid = (low+high)/2;
        
        // if(v[mid]>=x){
        //     for(int i=mid; i>=low; i--){
        //         if(v[i]<=x) return i;
        //     }
        // } else {
        //     for(int i=high; i>=mid; i--){
        //         if(v[i]<=x) return i;
        //     }
            
        // }
        
        // return -1;
        
  =======================
  
  class Solution{

    static int findFloor(long arr[], int n, long x)
    {
        int i=0;
        int j=n-1;
        int f=-1;
        
        while(i<=j){
            int mid=(i+j)/2;
            if(arr[mid]>x){
                j=mid-1;   
            }else if(arr[mid]<x){        	
                i=mid+1;
                f=mid;
            }else{  
               f=mid;
               break;
            }
        }
        return f;
    }
}

====================================================


class Solution{

    // Function to find floor for the given x
    // this is just like binary search
    static int findFloorUtil(long arr[], int low, int high, long x)
    {
        // If low and high cross each other 
        if (low > high) 
            return -1; 
  
        // If last element is smaller than x 
        if (x >= arr[high]) 
            return high; 
  
        // Find the middle point 
        int mid = (low+high)/2; 
  
        // If middle point is floor. 
        if (arr[mid] == x) 
            return mid; 
  
        // If x lies between mid-1 and mid 
        if (mid > 0 && arr[mid-1] <= x && x < 
                                    arr[mid]) 
            return mid-1; 
  
        // If x is smaller than mid, floor 
        // must be in left half. 
        if (x < arr[mid]) 
            return findFloorUtil(arr, low,  
                               mid - 1, x); 
  
        // If mid-1 is not floor and x is 
        // greater than arr[mid], 
        return findFloorUtil(arr, mid + 1, high, 
                                         x); 
    }
    static int findFloor(long arr[], int n, long x)
    {
        return findFloorUtil(arr, 0, n-1, x);
    }
    
}
