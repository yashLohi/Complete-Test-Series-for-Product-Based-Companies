class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        // First check all the values that are
        // present in an array then go to that
        // values as indexes and increment by
        // the size of array
        for (int i = 0; i < n; i++) {
            int index = arr[i] % n;
            arr[index] += n;
        }

        // Now check which value exists more
        // than once by dividing with the size
        // of array
        int flag = 0;
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            if ((arr[i] / n) > 1) {
                ans.add(i);
                flag = 1;
            }
        }
        if (flag == 0) ans.add(-1);
        return ans;
    }
}
    
    
    /*----------------------------*/


public static ArrayList<Integer> duplicates(int arr[], int n) {
        // code here
        int freq[] = new int[n];
        for(int i =0; i<n; i++)
        freq[arr[i]]++;
        ArrayList<Integer> ans = new ArrayList<>();
        
        for(int i=0; i<n; i++)
        
        if(freq[i] > 1) ans.add(i);
        
        if(ans.size() == 0)
        ans.add(-1);
        
        return ans;
            
        
    }
    
    
    /*---------------------------------*/




public static ArrayList<Integer> duplicates(int arr[], int n) {
        // code here
           HashSet<Integer> hs=new HashSet<>();
        Arrays.sort(arr);
       
       
       for(int i=0;i<n-1;i++)
       {
           if(arr[i]==arr[i+1])
           {
               hs.add(arr[i+1]);
           }
       }
      
       
           ArrayList<Integer> a = new ArrayList<>(hs);
           
           Collections.sort(a);
       
       if(a.isEmpty())
       {
           a.add(-1);
       }
       return a;
        
    }
